{"data":{"post":{"id":"bff1bff2-0832-5078-8b76-bbbf4809ce0b","html":"<p>Converting Markown with code fragments to HTML on the client (Angular) can be done in under 50 LoC. This blog post will guide you through it.</p>\n<p>We start by installing three dependencies (what would web dev be without some tasty npm packages ðŸ˜‚):</p>\n<ul>\n<li>marked (0.7.0) will transform most of the Markdown input to HTML</li>\n<li>highlight.js (9.15.8) gives some nice highlighting to the code fragments within the Markdown</li>\n<li>dompurify (1.0.11) helps to keep things secure to avoid <a href=\"https://angular.io/guide/security#xss\">XSS attack surface</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> marked highlight.js dompurify</code></pre></div>\n<p>To make our code snippets look pretty, we need to choose a CSS file from highlight.js. This <a href=\"https://highlightjs.org/static/demo/\">demo page</a> showcases all available designs (and supported languages for that matter).\nThe selected style can be applied, by including the CSS file to the Angular project, e.g. by adding the following to the <code class=\"language-text\">style</code> section of the <code class=\"language-text\">angular.json</code> configuration file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">...\n<span class=\"token property\">\"styles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"src/styles.css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"./node_modules/highlight.js/styles/dracula.css\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n...</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\">import marked, { Renderer } from &#39;marked&#39;;\nimport highlightjs from &#39;highlight.js&#39;;\nimport DOMPurify from &#39;dompurify&#39;;\n\nimport { Component, Input, OnChanges, SimpleChange, ViewEncapsulation } from &#39;@angular/core&#39;;\nimport { DomSanitizer, SafeHtml } from &#39;@angular/platform-browser&#39;;\n\n@Component({\n    selector: &#39;markdown&#39;,\n    template: &#39;&lt;pre [innerHTML]=&quot;data&quot;&gt;&lt;/pre&gt;&#39;,\n    encapsulation: ViewEncapsulation.None\n})\nexport class MarkdownComponent implements OnChanges {\n    static highlightCode(code: string, language: string): string {\n        if (!(language &amp;&amp; highlightjs.getLanguage(language))) {\n            language = &quot;markdown&quot;; // use &#39;markdown&#39; as default language\n        }\n\n        const highlighted = highlightjs.highlight(language, code).value;\n        return `&lt;code class=&quot;hljs ${language}&quot;&gt;${highlighted}&lt;/code&gt;`;\n    }\n\n    @Input() text: string;\n    data: SafeHtml;\n    md: any;\n\n    constructor(private sanitizer: DomSanitizer) {\n        const renderer = new Renderer();\n        renderer.code = MarkdownComponent.highlightCode;\n        this.md = marked.setOptions({ renderer });\n    }\n\n    markdownToSafeHtml(value: string): SafeHtml {\n        const html = this.md(value);\n        const safeHtml = DOMPurify.sanitize(html);\n        return this.sanitizer.bypassSecurityTrustHtml(safeHtml);\n    }\n\n    ngOnChanges(changes: { [propKey: string]: SimpleChange }) {\n        for (let propName in changes) {\n            if (propName === &quot;text&quot;) {\n                const value = changes[propName].currentValue;\n                if (value) {\n                    this.data = this.markdownToSafeHtml(value);\n                }\n            }\n        }\n    }\n}</code></pre></div>","fields":{"slug":"/client-side-markdown-to-html/","prefix":"2019-07-15"},"frontmatter":{"title":"Convert Markdown to HTML in an Angular app","author":"nicolas portmann","category":"webdev","cover":{"childImageSharp":{"resize":{"src":"/static/7831a832dbaadb1ea42eca0cdc5e8264/eadbd/pankaj-patel-u2Ru4QBXA5Q-unsplash.jpg"}}}}},"authornote":{"id":"2bd2c695-fbab-5aba-9e5f-558db048c85d","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/client-side-markdown-to-html/","prev":{"id":"44375a88-9943-5bbc-8d18-0c374561d503","fields":{"slug":"/aes-ni-outperforming-c-and-openssl/","prefix":"2019-04-08","source":"posts"},"frontmatter":{"title":"AES-NI (.NET) - Outperforming C and OpenSSL","category":"crypto"}},"source":"posts"}}