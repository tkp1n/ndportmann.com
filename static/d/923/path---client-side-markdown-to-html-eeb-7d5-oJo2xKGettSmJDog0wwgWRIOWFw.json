{"data":{"post":{"id":"bff1bff2-0832-5078-8b76-bbbf4809ce0b","html":"<p>Converting Markdown with code fragments to HTML on the client (Angular) can be done in under 50 LoC. This blog post guides you through it.</p>\n<p>We start by installing three dependencies (what would web dev be without some tasty npm packages ðŸ˜‚):</p>\n<ul>\n<li><em>marked</em> (0.7.0) will transform most of the Markdown input to HTML</li>\n<li><em>highlight.js</em> (9.15.8) applies beautiful nice highlighting to the code fragments within the Markdown</li>\n<li><em>DOMpurify</em> (1.0.11) helps to keep things secure to avoid <a href=\"https://angular.io/guide/security#xss\">XSS attack surface</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> marked highlight.js dompurify</code></pre></div>\n<p>To make our code snippets look pretty, we need to choose a CSS file from <em>highlight.js</em>. This <a href=\"https://highlightjs.org/static/demo/\">demo page</a> showcases all available designs (and supported languages for that matter).\nThe selected style can be applied, by including the CSS file to the Angular project, e.g., by adding the following to the <code class=\"language-text\">style</code> section of the <code class=\"language-text\">angular.json</code> configuration file.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">...\n<span class=\"token property\">\"styles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"src/styles.css\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"./node_modules/highlight.js/styles/dracula.css\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n...</code></pre></div>\n<p>The following component, named <code class=\"language-text\">markdown.component.ts</code> does most of the heavy-lifting for you. The constructor defines a custom <em>marked</em> <code class=\"language-text\">Renderer</code> with a callback for handling the code snippets. <code class=\"language-text\">highlightCode</code> delegates to <em>highlight.js</em> to do the actual formatting of the code (using markdown as default, should <em>highlight.js</em> not know your language). <code class=\"language-text\">markdownToSafeHtml</code> is called by <code class=\"language-text\">ngOnChanges</code> if the markdown input changes and uses the previously defined marked instance and DOMPurify to convert the new value into <code class=\"language-text\">SafeHtml</code> which can be used directly as <code class=\"language-text\">[innerHTML]</code> in the template of the component.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> marked<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Renderer <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'marked'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> highlightjs <span class=\"token keyword\">from</span> <span class=\"token string\">'highlight.js'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> DOMPurify <span class=\"token keyword\">from</span> <span class=\"token string\">'dompurify'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    Component<span class=\"token punctuation\">,</span> Input<span class=\"token punctuation\">,</span> OnChanges<span class=\"token punctuation\">,</span> SimpleChange<span class=\"token punctuation\">,</span> ViewEncapsulation\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n    DomSanitizer<span class=\"token punctuation\">,</span> SafeHtml\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/platform-browser'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'markdown'</span><span class=\"token punctuation\">,</span>\n    template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;pre [innerHTML]=\"data\">&lt;/pre>'</span><span class=\"token punctuation\">,</span>\n    encapsulation<span class=\"token punctuation\">:</span> ViewEncapsulation<span class=\"token punctuation\">.</span>None\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MarkdownComponent</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OnChanges</span> <span class=\"token punctuation\">{</span>\n\n    @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> text<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n    data<span class=\"token punctuation\">:</span> SafeHtml<span class=\"token punctuation\">;</span>\n    md<span class=\"token punctuation\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token function\">highlightCode</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> language<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>language <span class=\"token operator\">&amp;&amp;</span> highlightjs<span class=\"token punctuation\">.</span><span class=\"token function\">getLanguage</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n             <span class=\"token comment\">// use 'markdown' as default language</span>\n            language <span class=\"token operator\">=</span> <span class=\"token string\">'markdown'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> highlightjs<span class=\"token punctuation\">.</span><span class=\"token function\">highlight</span><span class=\"token punctuation\">(</span>language<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token string\">`&lt;code class=\"hljs </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>language<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">\"></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>result<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&lt;/code>`</span></span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> sanitizer<span class=\"token punctuation\">:</span> DomSanitizer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Renderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        renderer<span class=\"token punctuation\">.</span>code <span class=\"token operator\">=</span> MarkdownComponent<span class=\"token punctuation\">.</span>highlightCode<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>md <span class=\"token operator\">=</span> marked<span class=\"token punctuation\">.</span><span class=\"token function\">setOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> renderer <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">markdownToSafeHtml</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> SafeHtml <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> html <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">md</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> safeHtml <span class=\"token operator\">=</span> DOMPurify<span class=\"token punctuation\">.</span><span class=\"token function\">sanitize</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sanitizer<span class=\"token punctuation\">.</span><span class=\"token function\">bypassSecurityTrustHtml</span><span class=\"token punctuation\">(</span>safeHtml<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">ngOnChanges</span><span class=\"token punctuation\">(</span>changes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>propKey<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> SimpleChange <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> propName <span class=\"token keyword\">in</span> changes<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>propName <span class=\"token operator\">===</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> changes<span class=\"token punctuation\">[</span>propName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>currentValue<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">markdownToSafeHtml</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The last step would then be to add the component to the <code class=\"language-text\">declarations</code> of the app module:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">...\n  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    AppComponent<span class=\"token punctuation\">,</span>\n    MarkdownComponent\n  <span class=\"token punctuation\">]</span>\n...</code></pre></div>\n<p>It can then be used in any other component as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span>\n\n@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  selector<span class=\"token punctuation\">:</span> <span class=\"token string\">'app-root'</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;markdown [text]=md>&lt;/markdown>'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppComponent</span> <span class=\"token punctuation\">{</span>\n  md <span class=\"token operator\">=</span> <span class=\"token string\">'# Hello Markdown\\n```csharp\\npublic class Foo {}\\n```'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/client-side-markdown-to-html/","prefix":"2019-07-15"},"frontmatter":{"title":"Convert Markdown to HTML in an Angular app","author":"nicolas portmann","category":"webdev","cover":{"childImageSharp":{"resize":{"src":"/static/7831a832dbaadb1ea42eca0cdc5e8264/eadbd/pankaj-patel-u2Ru4QBXA5Q-unsplash.jpg"}}}}},"authornote":{"id":"2bd2c695-fbab-5aba-9e5f-558db048c85d","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/client-side-markdown-to-html/","prev":{"id":"44375a88-9943-5bbc-8d18-0c374561d503","fields":{"slug":"/aes-ni-outperforming-c-and-openssl/","prefix":"2019-04-08","source":"posts"},"frontmatter":{"title":"AES-NI (.NET) - Outperforming C and OpenSSL","category":"crypto"}},"source":"posts"}}