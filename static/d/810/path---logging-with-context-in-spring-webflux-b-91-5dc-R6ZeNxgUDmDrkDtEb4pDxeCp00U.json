{"data":{"post":{"id":"4f7efefe-ed6d-5787-bc07-289eb60587cf","html":"<p>In the first part, we investigated how context information such as MDCs can be passed from and to a Spring WebFlux application. We shall now investigate how we can enrich said context and include it in our log messages.</p>\n<h2>Adding to the Context</h2>\n<p>To add context information to the <code class=\"language-text\">Context</code>, we use the method <code class=\"language-text\">subscriberContext</code> present on all <code class=\"language-text\">Mono</code> and <code class=\"language-text\">Flux</code> instances. It accepts a <code class=\"language-text\">Function&lt;Context, Context&gt;</code> which transforms the exisiting immutable <code class=\"language-text\">Context</code> into a new <code class=\"language-text\">Context</code>. In this case with an additional information.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> Mono<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">processRequestForClient</span><span class=\"token punctuation\">(</span>String clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLIENT-ID\"</span><span class=\"token punctuation\">,</span> clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The helper function <code class=\"language-text\">put</code> below provides the required <code class=\"language-text\">Function&lt;Context, Context&gt;</code> that adds the given key and value to the context or creates a new context if none exists.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String CONTEXT_MAP <span class=\"token operator\">=</span> <span class=\"token string\">\"context-map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Function<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Context<span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">></span></span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> String value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ctx <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> maybeContextMap <span class=\"token operator\">=</span>\n                ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getOrEmpty</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span> ctxMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ctxMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">,</span> ctxMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Above usage of <code class=\"language-text\">subscriberContext</code> seems odd, as the addition to the context appears to be the last operation in the chain of calls. The <a href=\"https://projectreactor.io/docs/core/release/reference/#_simple_examples\">Reactor documentation</a> sheds some light on this oddity:</p>\n<blockquote>\n<p>Even though subscriberContext is the last piece of the chain, it is the one that gets executed first (due to its subscription time nature, and the fact that the subscription signal flows from bottom to top).</p>\n</blockquote>\n<h2>Logging with context</h2>\n<p>Time for the final piece of the puzzle; writing logs with set context applied. Just as with the <a href=\"https://simonbasle.github.io/2018/02/contextual-logging-with-reactor-context-and-mdc/\">approach suggested by Simon Basle</a> (mentioned in the previous post), we utilize <code class=\"language-text\">doOnEach</code> with two helper methods to log with context. The helper methods, in this case, are <code class=\"language-text\">logOnNext</code> and <code class=\"language-text\">logOnError</code>. Both invoke a lambda that accepts the current result or the exception respectively. We could therefore add the following two log statemets to the <code class=\"language-text\">processRequestForClient</code> method from above.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FooService</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Logger logger \n        <span class=\"token operator\">=</span> LoggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>FooService<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> Mono<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">processRequestForClient</span><span class=\"token punctuation\">(</span>String clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">doOnEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">logOnNext</span><span class=\"token punctuation\">(</span>\n                        res <span class=\"token operator\">-</span><span class=\"token operator\">></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: {}\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doOnEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">logOnError</span><span class=\"token punctuation\">(</span>\n                        e <span class=\"token operator\">-</span><span class=\"token operator\">></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occurred...\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLIENT-ID\"</span><span class=\"token punctuation\">,</span> clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The helper methods <code class=\"language-text\">logOnNext</code> and <code class=\"language-text\">logOnError</code> are best placed in a helper class. Both extract the context information from the <code class=\"language-text\">doOnEach</code> <code class=\"language-text\">Signal</code> and put set it as the MDC before calling the provided lambda.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogHelper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> Consumer<span class=\"token operator\">&lt;</span>Signal<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> <span class=\"token function\">logOnNext</span><span class=\"token punctuation\">(</span>\n            Consumer<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> log<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> signal <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> SignalType<span class=\"token punctuation\">.</span>ON_NEXT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> maybeContextMap\n                    <span class=\"token operator\">=</span> signal<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrEmpty</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                MDC<span class=\"token punctuation\">.</span><span class=\"token function\">setContextMap</span><span class=\"token punctuation\">(</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                    MDC<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> Consumer<span class=\"token operator\">&lt;</span>Signal<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> <span class=\"token function\">logOnError</span><span class=\"token punctuation\">(</span>\n            Consumer<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Throwable<span class=\"token punctuation\">></span></span> log<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> signal <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">isOnError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> maybeContextMap\n                    <span class=\"token operator\">=</span> signal<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrEmpty</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">getThrowable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                MDC<span class=\"token punctuation\">.</span><span class=\"token function\">setContextMap</span><span class=\"token punctuation\">(</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n                    log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">getThrowable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n                    MDC<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Summary</h2>\n<p>If we extend our <code class=\"language-text\">DemoController</code> from part one with a call to above <code class=\"language-text\">FooService</code>, we are now able to perform the following request</p>","fields":{"slug":"/logging-with-context-in-spring-webflux/","prefix":"2018-01-05"},"frontmatter":{"title":"Logging with Context in Spring WebFlux (Part II)","author":"nicolas portmann","category":"Java","cover":{"childImageSharp":{"resize":{"src":"/static/2d14b869f8e9d805b771b83e8920c7ca/ada8c/markus-spiske-445253-unsplash.jpg"}}}}},"authornote":{"id":"37e21f59-b45d-5bbb-87bd-acb76a2de5c3","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"slug":"/logging-with-context-in-spring-webflux/","prev":{"id":"49b07dc0-e0f7-56a6-bc81-4d2dfd27103e","fields":{"slug":"/passing-context-with-spring-webflux/","prefix":"2018-01-04","source":"posts"},"frontmatter":{"title":"Passing Context with Spring WebFlux (Part I)","category":"Java"}},"source":"posts"}}