{"data":{"post":{"id":"12bfd140-813c-55b8-99bb-55ddf22a02ab","html":"<h2>Motivation</h2>\n<p>So I was researching <a href=\"https://software.intel.com/sites/default/files/article/165683/aes-wp-2012-09-22-v01.pdf\">AES New Instructions (AES-NI)</a> and the support for <a href=\"https://devblogs.microsoft.com/dotnet/using-net-hardware-intrinsics-api-to-accelerate-machine-learning-scenarios/\">hardware intrinsics in .NET Core 3.0</a> when i stumbeled over <a href=\"https://github.com/ronnieholm/Playground/tree/master/TrustpilotAesChallenge\">this repository</a> comparing different implementations of a <a href=\"http://followthewhiterabbit.trustpilot.com/challenge2.html\">coding challenge</a> from <a href=\"https://www.trustpilot.com/\">Trustpilot</a>. What puzzled me most, was the fact that the .NET Core implementation took 6 minutes to complete, while an implementation in C only required 9 seconds (a factor of 40 slower!). I woulndâ€™t have been surprised if a well optimized native implementation of a given problem is faster than the equivalent managed implementation in C#, but the factor was just way too high. So I started to tweak the code and ended up with a solution that outperformed the implementation in C by a factor of ~4 ðŸ˜….</p>\n<h2>Analyzing the Performance Bottleneck</h2>\n<p>The idea behind the original implementation is quite smart and wasnâ€™t changed throughout my</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">string</span> <span class=\"token function\">Decrypt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cipherText<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> iv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> decryptor <span class=\"token operator\">=</span> aes<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDecryptor</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> iv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> ms <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryStream</span><span class=\"token punctuation\">(</span>cipherText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> cs <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CryptoStream</span><span class=\"token punctuation\">(</span>ms<span class=\"token punctuation\">,</span> decryptor<span class=\"token punctuation\">,</span> CryptoStreamMode<span class=\"token punctuation\">.</span>Read<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> sr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StreamReader</span><span class=\"token punctuation\">(</span>cs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> sr<span class=\"token punctuation\">.</span><span class=\"token function\">ReadToEnd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","fields":{"slug":"/aes-ni-system-runtime-intrinsics/","prefix":"2019-03-13"},"frontmatter":{"title":"Outperforming OpenSSL in .NET Core using AES-NI","author":"nicolas portmann","category":"crypto","cover":{"childImageSharp":{"resize":{"src":"/static/d800d1366a59cb100ebe29a1dd636408/ada8c/kolleen-gladden-224796-unsplash.jpg"}}}}},"authornote":{"id":"37e21f59-b45d-5bbb-87bd-acb76a2de5c3","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"slug":"/aes-ni-system-runtime-intrinsics/","prev":{"id":"02a0c736-732d-5ec7-802c-c7b40700924f","fields":{"slug":"/pascals-triangle/","prefix":"2019-02-15","source":"posts"},"frontmatter":{"title":"Pascal's triangle","category":"scala"}},"source":"posts"}}