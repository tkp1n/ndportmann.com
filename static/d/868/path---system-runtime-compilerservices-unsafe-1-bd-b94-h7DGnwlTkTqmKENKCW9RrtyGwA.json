{"data":{"post":{"id":"7689cce5-e086-5fe2-a5f6-0c93165d7463","html":"<p>Prior to the introduction of <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#ref-locals-and-returns\">ref returns and ref locals in C# 7.0</a> and following improvements such as <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-2#conditional-ref-expressions\">conditional ref expressions in C# 7.2</a> and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-3#ref-local-variables-may-be-reassigned\">ref reassignments in C# 7.3</a> there was no way to perform pointer arithmetics in C# without going <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/unsafe-code-pointers/index\">unsafe</a>. This post explores <code class=\"language-text\">System.Runtime.CompilerServices.Unsafe</code> a class capable of replacing both the <code class=\"language-text\">unsafe</code> and the <code class=\"language-text\">fixed</code> keywords from you codebase. Be aware however, that doing so will not increase the readability of you code base, if anything the opposite is the case. But it could very well make it faster.</p>\n<p>The <code class=\"language-text\">fixed</code> keyword in C# pins an object in memory and allows you to obtain an unmanaged pointer to it. This prohibits the GC from moving the object to another memory location (e.g. during compaction), while you operate on the pointer. This implies additional bookkeeping for the GC, which should generally be avoided if possible (see “Rule 22: Avoid pinning” in the excellent <a href=\"https://prodotnetmemory.com/\">Pro .NET Memory Management by Konrad Kokosa</a>). Using the <code class=\"language-text\">fixed</code> keyword may also prevent inlining of the method using it (see <a href=\"https://twitter.com/buybackoff/status/882256068855910400\">this tweet by Victor Baybekov</a> including the PRs in the comments).</p>\n<p><code class=\"language-text\">System.Runtime.CompilerServices.Unsafe</code> is part of the .NET Platform Extensions which are documented <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe?view=dotnet-plat-ext-2.2\">here</a> and can be obtained via <a href=\"https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe/\">NuGet</a>. This post will not cover the entire API surface of <code class=\"language-text\">Unsafe</code> but focus on accessing arrays (preferably without bounds checks) and doing pointer arithmetics.</p>\n<h2>Why going unsafe in the first place?</h2>\n<p>C# and .NET is an excellent platform for getting work done. It focuses on developer productivity, safety and ease of use. To make sure code written in C# / .NET does not only look good but also performs good, framework and library authors must focus on performace. And you should probably too, but make sure to concentrate your efforts on the 1-3% of your code base, that are actually worth optimizing (<em>resisting the urge to quote Knuth here</em>). <code class=\"language-text\">unsafe</code> code allows you to go beyond what is possible in “normal” C# (Trivia: S.R.CS.Unsafe is written in IL as the concepts introduced by it cannot be expressed in any .NET langauge.). Things you can only do in <code class=\"language-text\">unsafe</code> code or using the <code class=\"language-text\">Unsafe</code> class incldue but are not limited to:</p>\n<ul>\n<li>Random access to arrays without bounds checks.</li>\n<li>Reinterpreting / casting a reference as a reference to a new the type of </li>\n<li>Casting without dynamic type checking.</li>\n</ul>\n<h2>Obtaining a reference</h2>\n<p>Before we can perform any kind of <code class=\"language-text\">Unsafe</code>-magic we need to obtain a reference to an object (an array in this case). There are multiple ways to do so:</p>\n<p>The simplest way the can be achieved with the language features provided by C# 7.0 and above. This is 100% safe and will throw if the array is <code class=\"language-text\">null</code> or the specified element does not exist. This safety comes at a cost of course. </p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">byte</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token comment\">; ref byte ArrayAccess(byte[] array) </span>\n<span class=\"token comment\">;     => ref array[0];</span>\n<span class=\"token label function\">L0000:</span> cmp dword <span class=\"token operator\">[</span><span class=\"token register variable\">edx</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token operator\">]</span>, <span class=\"token number\">0x0</span>\n<span class=\"token label function\">L0004:</span> jbe L000a\n<span class=\"token label function\">L0006:</span> lea <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">edx</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0009:</span> ret\n<span class=\"token label function\">L000a:</span> call <span class=\"token number\">0x74033430</span>\n<span class=\"token label function\">L000f:</span> int3</code></pre></div>\n<p>This method could also be used to obtain a reference to an element in the array at a given offset simply by replacing the <code class=\"language-text\">0</code> in above snippet with the desired element. </p>\n<p>There is a riskier but faster way to get a reference to the 0th element of a given <code class=\"language-text\">Span&lt;T&gt;</code> however. Make sure you only use this, if you are certain the span is non-null and not empty. The <code class=\"language-text\">Span&lt;T&gt;</code> variant is branch-free.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Span<span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token operator\">></span> span <span class=\"token operator\">=</span> <span class=\"token keyword\">stackalloc</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">byte</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> MemoryMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">GetReference</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token comment\">; ref byte SpanAccess(Span&lt;byte> span) </span>\n<span class=\"token comment\">;     => ref MemoryMarshal.GetReference(span);</span>\n<span class=\"token label function\">L0000:</span> lea <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">esp</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0004:</span> push dword <span class=\"token operator\">[</span><span class=\"token register variable\">eax</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0007:</span> push dword <span class=\"token operator\">[</span><span class=\"token register variable\">eax</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L000a:</span> push dword <span class=\"token operator\">[</span><span class=\"token register variable\">eax</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L000c:</span> call dword <span class=\"token operator\">[</span><span class=\"token number\">0x52652d8c</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0012:</span> ret <span class=\"token number\">0xc</span></code></pre></div>\n<h2>Pointer arithmetics</h2>\n<h3>Adding offsets to references</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> ptr <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">byte</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> y <span class=\"token operator\">=</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Subtracting offsets to references</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">-</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">byte</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> y <span class=\"token operator\">=</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Adding offsets in iterations</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">*</span>ptr<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">ptr <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Subtracting offsets in iterations</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">*</span>ptr<span class=\"token operator\">--</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">ptr <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Comparing pointer addresses</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">assert ptr1 <span class=\"token operator\">==</span> ptr2<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">AreSame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Determining the size of a type</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Casting - breaking type safety</h2>","fields":{"slug":"/system-runtime-compilerservices-unsafe/","prefix":"2019-01-27"},"frontmatter":{"title":"Unsafe array access and pointer arithmetics in C#","author":"nicolas portmann","category":"dotnet","cover":{"childImageSharp":{"resize":{"src":"/static/b864d7fab0550d70b724023a694ddd52/ada8c/joey-banks-380271-unsplash.jpg"}}}}},"authornote":{"id":"37e21f59-b45d-5bbb-87bd-acb76a2de5c3","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"slug":"/system-runtime-compilerservices-unsafe/","prev":{"id":"2b47e67e-5cd4-5c7f-9ae9-4d42a24ae77f","fields":{"slug":"/logging-with-context-in-spring-webflux/","prefix":"2019-01-05","source":"posts"},"frontmatter":{"title":"Logging with Context in Spring WebFlux (Part II)","category":"java"}},"source":"posts"}}