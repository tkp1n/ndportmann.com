{"data":{"post":{"id":"49b07dc0-e0f7-56a6-bc81-4d2dfd27103e","html":"<p>[//]: &#x3C;> (Fancy start)</p>\n<blockquote>\n<p>This is a two part blog post. You can find the link to part to at the very bottom of the page.</p>\n</blockquote>\n<p>With traditional Jakarta EE (Java EE) or Spring projects, we utilize <a href=\"https://logback.qos.ch/manual/mdc.html\">MDCs (Mapped Diagnostic Context)</a> - a feature from SLF4J - to enrich logs with contextual data. Such contextual data might include but is not limited to the following:</p>\n<ul>\n<li>Request ID,</li>\n<li>DNS name of the hardware involved in processing the request,</li>\n<li>The ID of the client initiating the request</li>\n</ul>\n<p>In a microservices environment, this information is then typically passed to all services involved in handling a specific request. Although <a href=\"https://tools.ietf.org/html/rfc6648\">deprecated</a> we examine, how to best pass context information between services as HTTP non-standard X- headers. We also investigate, how to use constructs such as MDCs in a reactive environment, where <code class=\"language-text\">ThreadLocal</code>s cannot be used to store context. </p>\n<p>The solution to the latter is a variation of <a href=\"https://simonbasle.github.io/2018/02/contextual-logging-with-reactor-context-and-mdc/\">this excellent idea by Simon Basle</a>. I suggest you skim over it before reading on.</p>\n<h2>Handling headers with WebFilters</h2>\n<p><code class=\"language-text\">WebFilter</code>s function much like their <a href=\"https://www.oracle.com/technetwork/java/filters-137243.html\">servelt counterparts</a>, but using Spring and Reactor specific APIs. </p>\n<p>To start, we start we create a component implementing the <code class=\"language-text\">WebFilter</code> interface. In this component, we register two methods, one for copying the MDCs passed as request headers to the context, a second one to copy the context to the response.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MdcHeaderFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebFilter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token keyword\">public</span> Mono<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Void<span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@NonNull</span> ServerWebExchange ex<span class=\"token punctuation\">,</span> \n        <span class=\"token annotation punctuation\">@NonNull</span> WebFilterChain chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ex<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">beforeCommit</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token function\">addContextToHttpResponseHeaders</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span>\n                    ctx <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token function\">addRequestHeaderstToContext</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although it might not look like it, <code class=\"language-text\">addRequestHeaderstToContext</code> gets invoked first (in fact before any @Controller) and <code class=\"language-text\">addContextToHttpResponseHeaders</code> is called after the request has been processed by the respective controller. There is one caveat, we should address right away to avoid unpleasant surprises in the future. The <code class=\"language-text\">beforeCommit</code> callback gets executed only if the request handlers leave no exception uncaught. As context in logs is especially important, if something goes wrong, we shall make sure, that no exception goes uncaught. There are many solutions to solve this; weâ€™ll go with a <code class=\"language-text\">@ControllerAdvice</code> for now:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionResponse</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> Date timestamp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> String path<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> String error<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> String message<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> ResponseEntity<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>ExceptionResponse<span class=\"token punctuation\">></span></span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span>\n        ServerWebExchange ex<span class=\"token punctuation\">,</span> \n        HttpStatus status<span class=\"token punctuation\">,</span> \n        Exception e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> ResponseEntity<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">ExceptionResponse</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                ex<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getPath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">pathWithinApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                status<span class=\"token punctuation\">.</span><span class=\"token function\">value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                status<span class=\"token punctuation\">.</span><span class=\"token function\">getReasonPhrase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ctor, getter</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebExceptionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span>\n    <span class=\"token annotation punctuation\">@ResponseBody</span>\n    <span class=\"token keyword\">public</span> Mono<span class=\"token operator\">&lt;</span>ResponseEntity<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>ExceptionResponse<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> <span class=\"token function\">gottaCatchEmAll</span><span class=\"token punctuation\">(</span>\n        Exception e<span class=\"token punctuation\">,</span> \n        ServerWebExchange ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>ExceptionResponse<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">doOnEach</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">logOnNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>LOG_MESSAGE<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With that out of the way, we take a look at the two callbacks from the <code class=\"language-text\">WebFilter</code>. <code class=\"language-text\">addRequestHeaderstToContext</code> inspects all headers of every request passed through it and extracts all headers starting with <code class=\"language-text\">X-MDC-</code> and populates a Map with them. Before returning, the Map is added to the context passed as a parameter to the method. A mutable map is now stored within the otherwise immutable <code class=\"language-text\">Context</code>, allowing us to quite easily add additional context information in the handlers as we shall see soon. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String MDC_HEADER_PREFIX <span class=\"token operator\">=</span> <span class=\"token string\">\"X-MDC-\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String CONTEXT_MAP <span class=\"token operator\">=</span> <span class=\"token string\">\"context-map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> Context <span class=\"token function\">addRequestHeaderstToContext</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">final</span> ServerHttpRequest request<span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">final</span> Context context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span> contextMap <span class=\"token operator\">=</span> request\n            <span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSingleValueMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span><span class=\"token operator\">></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>MDC_HEADER_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n                <span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-</span><span class=\"token operator\">></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>MDC_HEADER_PREFIX<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                      Map<span class=\"token punctuation\">.</span>Entry<span class=\"token operator\">:</span><span class=\"token operator\">:</span>getValue\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">,</span> contextMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The purpose of <code class=\"language-text\">addContextToHttpResponseHeaders</code> is the exact opposite. It prefixes all entries in the context map with <code class=\"language-text\">X-MDC-</code> and adds them to the response headers.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> Mono<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Void<span class=\"token punctuation\">></span></span> <span class=\"token function\">addContextToHttpResponseHeaders</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">final</span> ServerHttpResponse res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doOnNext</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        HttpHeaders headers <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>MDC_HEADER_PREFIX <span class=\"token operator\">+</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>An aside: In Spring 5.0.4 this was not working as expected which motivated me to open my first <a href=\"https://jira.spring.io/browse/SPR-16597\">issue</a> with Spring. Luckily it was quickly addressed and fixed in Spring 5.0.5.</p>\n</blockquote>\n<h2>Adding to the Context</h2>\n<p>To add context information to the context, we use the method <code class=\"language-text\">subscriberContext</code> present on all <code class=\"language-text\">Mono</code> and <code class=\"language-text\">Flux</code> instances. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Logger logger \n    <span class=\"token operator\">=</span> LoggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>FooService<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> Mono<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">processRequestForClient</span><span class=\"token punctuation\">(</span>String clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLIENT-ID\"</span><span class=\"token punctuation\">,</span> clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The helper function <code class=\"language-text\">put</code> below provides the required <code class=\"language-text\">Function&lt;Context, Context&gt;</code> that adds the given key and value to the context or creates a new context if none exists.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> String CONTEXT_MAP <span class=\"token operator\">=</span> <span class=\"token string\">\"context-map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> Function<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>Context<span class=\"token punctuation\">,</span> Context<span class=\"token punctuation\">></span></span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> String value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> ctx <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n        Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> maybeContextMap <span class=\"token operator\">=</span> \n            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">getOrEmpty</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span> ctxMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ctxMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">return</span> ctx<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">,</span> ctxMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Above usage of <code class=\"language-text\">subscriberContext</code> seems odd, as the addition to the context appears to be the last operation in the chain of calls. The <a href=\"https://projectreactor.io/docs/core/release/reference/#_simple_examples\">Reactor documentation</a> solves this mystery:</p>\n<blockquote>\n<p>Even though subscriberContext is the last piece of the chain, it is the one that gets executed first (due to its subscription time nature, and the fact that the subscription signal flows from bottom to top).</p>\n</blockquote>\n<h2>Logging with context</h2>\n<p>Time for the final piece of the puzzle; writing logs with set context applied. Just as with abovementioned approach suggested by Simon Basle, we utilize <code class=\"language-text\">doOnEach</code> with two helper methods to log with context. The helper methods, in this case, are <code class=\"language-text\">logOnNext</code> and <code class=\"language-text\">logOnError</code>. Both invoke a lambda that accepts the current result or the exception respectively as well as the context map. We could therefore add the following two log statemets to the <code class=\"language-text\">processRequestForClient</code> method from above.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Logger logger \n    <span class=\"token operator\">=</span> LoggerFactory<span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span>FooService<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> Mono<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">></span></span> <span class=\"token function\">processRequestForClient</span><span class=\"token punctuation\">(</span>String clientId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Mono<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>clientId<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>id <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token function\">processRequest</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>            \n            <span class=\"token punctuation\">.</span><span class=\"token function\">doOnEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">logOnNext</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result: {}\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doOnEach</span><span class=\"token punctuation\">(</span><span class=\"token function\">logOnError</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An error occurred...\"</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLIENT-ID\"</span><span class=\"token punctuation\">,</span> clientId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The helper methods <code class=\"language-text\">logOnNext</code> and <code class=\"language-text\">logOnError</code> are best placed in a helper class.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LogHelper</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span> EMPTY_MDC_MAP \n        <span class=\"token operator\">=</span> Collections<span class=\"token punctuation\">.</span><span class=\"token function\">unmodifiableMap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token function\">LogHelper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// hide default ctor</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> Consumer<span class=\"token operator\">&lt;</span>Signal<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> <span class=\"token function\">logOnNext</span><span class=\"token punctuation\">(</span>\n        BiConsumer<span class=\"token operator\">&lt;</span>T<span class=\"token punctuation\">,</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> log<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> signal <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> SignalType<span class=\"token punctuation\">.</span>ON_NEXT<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> maybeContextMap \n                <span class=\"token operator\">=</span> signal<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrEmpty</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> EMPTY_MDC_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span> contextMap <span class=\"token operator\">=</span> maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> contextMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> Consumer<span class=\"token operator\">&lt;</span>Signal<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> <span class=\"token function\">logOnError</span><span class=\"token punctuation\">(</span>\n        BiConsumer<span class=\"token operator\">&lt;</span>Throwable<span class=\"token punctuation\">,</span> Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> log<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> signal <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">isOnError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n            Optional<span class=\"token operator\">&lt;</span>Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span><span class=\"token operator\">></span> maybeContextMap \n                <span class=\"token operator\">=</span> signal<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getOrEmpty</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">isPresent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">getThrowable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> EMPTY_MDC_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                Map<span class=\"token generics function\"><span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token punctuation\">></span></span> contextMap <span class=\"token operator\">=</span> maybeContextMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                log<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>signal<span class=\"token punctuation\">.</span><span class=\"token function\">getThrowable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> contextMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Summary</h2>","fields":{"slug":"/passing-context-with-spring-webflux/","prefix":"2018-01-04"},"frontmatter":{"title":"Passing Context with Spring WebFlux","author":"nicolas portmann","category":"Java","cover":{"childImageSharp":{"resize":{"src":"/static/bff675e664834c0b5731c75046b1d565/ada8c/rawpixel-678089-unsplash.jpg"}}}}},"authornote":{"id":"37e21f59-b45d-5bbb-87bd-acb76a2de5c3","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"slug":"/passing-context-with-spring-webflux/","prev":{"id":"9bdda9dc-2b9c-5305-b081-d89e82cdfd5c","fields":{"slug":"/system-threading-channels/","prefix":"2018-01-03","source":"posts"},"frontmatter":{"title":"Exploring System.Threading.Channels","category":"dotnet"}},"next":{"id":"4f7efefe-ed6d-5787-bc07-289eb60587cf","fields":{"slug":"/logging-with-context-in-spring-webflux/","prefix":"2018-01-05","source":"posts"},"frontmatter":{"title":"Logging with Context in Spring WebFlux","category":"Java"}},"source":"posts"}}