{"data":{"post":{"id":"dd08c0c2-d919-5738-b2bf-40847cdf937e","html":"<p>Prior to the introduction of <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#ref-locals-and-returns\">ref returns and ref locals in C# 7.0</a> and the following improvements such as <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-2#conditional-ref-expressions\">conditional ref expressions in C# 7.2</a> and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-3#ref-local-variables-may-be-reassigned\">ref reassignments in C# 7.3</a> there was no way to perform pointer arithmetics in C# without going <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/unsafe-code-pointers/index\">unsafe</a>. This post explores <code class=\"language-text\">System.Runtime.CompilerServices.Unsafe</code> a class capable of replacing both the <code class=\"language-text\">unsafe</code> and the <code class=\"language-text\">fixed</code> keywords from you codebase. Will your code become more readable by using the <code class=\"language-text\">Unsafe</code> class? No, absolutely not. But it could very well make it faster.</p>\n<p>The <code class=\"language-text\">fixed</code> keyword in C# pins an object in memory. This prohibits the GC from moving, while you operate on the object using a pointer. This implies additional bookkeeping for the GC, which should generally be avoided if possible (see “Rule 22: Avoid pinning” in <a href=\"https://prodotnetmemory.com/\">Pro .NET Memory Management by Konrad Kokosa</a>). In addition using the <code class=\"language-text\">fixed</code> </p>","fields":{"slug":"/system-runtime-compilerservices-unsafe/","prefix":"2019-01-26"},"frontmatter":{"title":"Exploring System.Runtime.CompilerServices.Unsafe","author":"nicolas portmann","category":"dotnet","cover":{"childImageSharp":{"resize":{"src":"/static/b864d7fab0550d70b724023a694ddd52/ada8c/joey-banks-380271-unsplash.jpg"}}}}},"authornote":{"id":"37e21f59-b45d-5bbb-87bd-acb76a2de5c3","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"slug":"/system-runtime-compilerservices-unsafe/","prev":{"id":"2b47e67e-5cd4-5c7f-9ae9-4d42a24ae77f","fields":{"slug":"/logging-with-context-in-spring-webflux/","prefix":"2019-01-05","source":"posts"},"frontmatter":{"title":"Logging with Context in Spring WebFlux (Part II)","category":"java"}},"source":"posts"}}