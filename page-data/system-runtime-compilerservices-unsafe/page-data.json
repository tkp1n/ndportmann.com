{"componentChunkName":"component---src-templates-post-template-js","path":"/system-runtime-compilerservices-unsafe/","webpackCompilationHash":"786d471545d98ebf3726","result":{"data":{"post":{"id":"8aff4c28-80b3-56b9-9eae-09d2e8a737ef","html":"<p>Before the introduction of <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7#ref-locals-and-returns\">ref returns and ref locals in C# 7.0</a> and following improvements such as <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-2#conditional-ref-expressions\">conditional ref expressions in C# 7.2</a> and <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-3#ref-local-variables-may-be-reassigned\">ref reassignments in C# 7.3</a> there was no way to perform pointer arithmetics in C# without going <a href=\"https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/unsafe-code-pointers/index\">unsafe</a>. This post explores <code class=\"language-text\">System.Runtime.CompilerServices.Unsafe</code> a class capable of replacing both the <code class=\"language-text\">unsafe</code> and the <code class=\"language-text\">fixed</code> keywords from your codebase. Be aware, that doing so does not increase the readability of your codebase if anything the opposite is the case. However, it could very well make it faster.</p>\n<p>The <code class=\"language-text\">fixed</code> keyword in C# pins an object in memory and allows you to obtain an unmanaged pointer to it. Pinning prohibits the GC from moving the object to another memory location (e.g., during compaction), while you operate on the pointer. This, in turn, implies additional bookkeeping for the GC, which should generally be avoided if possible (see “Rule 22: Avoid pinning” in the excellent <a href=\"https://prodotnetmemory.com/\">Pro .NET Memory Management by Konrad Kokosa</a>). Using the <code class=\"language-text\">fixed</code> keyword may also prevent inlining of the method using it (see <a href=\"https://twitter.com/buybackoff/status/882256068855910400\">this tweet by Victor Baybekov</a> including the PRs in the comments).</p>\n<p><code class=\"language-text\">System.Runtime.CompilerServices.Unsafe</code> is part of the .NET Platform Extensions which are documented <a href=\"https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.unsafe?view=dotnet-plat-ext-2.2\">here</a> and can be obtained via <a href=\"https://www.nuget.org/packages/System.Runtime.CompilerServices.Unsafe/\">NuGet</a>. This post does not cover the entire API surface of <code class=\"language-text\">Unsafe</code> but focuses on accessing arrays (preferably without bounds checks) and doing pointer arithmetics.</p>\n<h2>Why going unsafe in the first place?</h2>\n<p>C# and .NET is an excellent platform for getting work done. It focuses on developer productivity, safety and ease of use.  To make sure code written in C# / .NET does look not only pretty but also performs good, framework and library authors must focus on performance. And you should probably too, but make sure to concentrate your efforts on the 1-3% of your code base, that are actually worth optimizing (<em>resisting the urge to quote Knuth here</em>). <code class=\"language-text\">unsafe</code> code allows you to go beyond what is possible in “normal” C# (Trivia: S.R.CS.Unsafe is written in IL as the concepts introduced by it cannot be expressed in any .NET language.). Things you can only do in <code class=\"language-text\">unsafe</code> code or using the <code class=\"language-text\">Unsafe</code> class include but are not limited to:</p>\n<ul>\n<li>Random access to arrays without bounds checks</li>\n<li>Read from / write to “random” memory locations</li>\n<li>Compare references (instead of the values they refer to)</li>\n<li>Reinterpret (cast) a reference as a reference to a different type</li>\n<li>Cast without dynamic type checks.</li>\n</ul>\n<p>This post will focus on the first three topics of the above list.</p>\n<h2>Obtaining a reference</h2>\n<p>Before we can perform any <code class=\"language-text\">Unsafe</code>-magic we need to obtain a reference to an object (an array in this case). There are multiple ways to do so.</p>\n<p>The simplest way this is achieved is with the language features provided by C# 7.0 and above. Below sample is 100% safe and will throw if the array is <code class=\"language-text\">null</code> or the specified element does not exist. This safety comes at a cost of course (see <code class=\"language-text\">cmp</code> and <code class=\"language-text\">jbe</code> in below JIT dump).</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">byte</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token comment\">; ref byte ArrayAccess(byte[] array) </span>\n<span class=\"token comment\">;     => ref array[0];</span>\n<span class=\"token label function\">L0000:</span> cmp dword <span class=\"token operator\">[</span><span class=\"token register variable\">edx</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token operator\">]</span>, <span class=\"token number\">0x0</span>\n<span class=\"token label function\">L0004:</span> jbe L000a\n<span class=\"token label function\">L0006:</span> lea <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">edx</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0009:</span> ret\n<span class=\"token label function\">L000a:</span> call <span class=\"token number\">0x74033430</span>\n<span class=\"token label function\">L000f:</span> int3</code></pre></div>\n<p>This method could also be used to obtain a reference to an element in the array at a given offset simply by replacing the <code class=\"language-text\">0</code> in above snippet with the desired element index. </p>\n<p>There is a riskier but faster way to get a reference to the 0th element of a given <code class=\"language-text\">Span&lt;T&gt;</code> however. Make sure you only use this, if you are certain the span is non-null and not empty. The <code class=\"language-text\">Span&lt;T&gt;</code> variant is branch-free.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Span<span class=\"token operator\">&lt;</span><span class=\"token keyword\">byte</span><span class=\"token operator\">></span> span <span class=\"token operator\">=</span> <span class=\"token keyword\">stackalloc</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">byte</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> MemoryMarshal<span class=\"token punctuation\">.</span><span class=\"token function\">GetReference</span><span class=\"token punctuation\">(</span>span<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"nasm\"><pre class=\"language-nasm\"><code class=\"language-nasm\"><span class=\"token comment\">; ref byte SpanAccess(Span&lt;byte> span) </span>\n<span class=\"token comment\">;     => ref MemoryMarshal.GetReference(span);</span>\n<span class=\"token label function\">L0000:</span> lea <span class=\"token register variable\">eax</span>, <span class=\"token operator\">[</span><span class=\"token register variable\">esp</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0004:</span> push dword <span class=\"token operator\">[</span><span class=\"token register variable\">eax</span><span class=\"token operator\">+</span><span class=\"token number\">0x8</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0007:</span> push dword <span class=\"token operator\">[</span><span class=\"token register variable\">eax</span><span class=\"token operator\">+</span><span class=\"token number\">0x4</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L000a:</span> push dword <span class=\"token operator\">[</span><span class=\"token register variable\">eax</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L000c:</span> call dword <span class=\"token operator\">[</span><span class=\"token number\">0x52652d8c</span><span class=\"token operator\">]</span>\n<span class=\"token label function\">L0012:</span> ret <span class=\"token number\">0xc</span></code></pre></div>\n<p>Below a collection of snippets try to translate <code class=\"language-text\">unsafe</code> code to code using <code class=\"language-text\">Unsafe</code>.\nTo make searching easier:</p>\n<ul>\n<li>all references/pointers are named <code class=\"language-text\">ptr</code>,</li>\n<li>when comparing multiple references/pointers, they are named <code class=\"language-text\">ptr1</code> and <code class=\"language-text\">ptr2</code>,</li>\n<li>the referenced type is assumed to be <code class=\"language-text\">int</code> (unless specified otherwise)</li>\n<li>all values written are 0x42,</li>\n<li>all offsets are 12.</li>\n</ul>\n<p>This should enable you to quickly find the appropriate <code class=\"language-text\">Unsafe</code> pattern for your existing <code class=\"language-text\">unsafe</code> code. Each snippet of <code class=\"language-text\">unsafe</code> code is immediately followed by the equivalent code pattern using the <code class=\"language-text\">Unsafe</code> class.</p>\n<h2>Accessing arrays without bounds checks</h2>\n<p>Given a reference to an element in an array, other elements in the same array can easily be accessed using the <code class=\"language-text\">Unsafe.Add</code> and <code class=\"language-text\">Unsafe.Subtract</code> methods to calculate offsets relative to the existing reference. Both methods calculate the number of bytes the reference has to be moved based on the type of the reference passed as the first parameter. Internally the implementation of <code class=\"language-text\">Unsafe.Add</code> could look something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// https://github.com/dotnet/coreclr/blob/d1c1cc91a85c510c7b10461acb35b8c545fe2b07/src/System.Private.CoreLib/shared/Internal/Runtime/CompilerServices/Unsafe.cs#L108</span>\n<span class=\"token keyword\">return</span> <span class=\"token keyword\">ref</span> <span class=\"token function\">AddByteOffset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> source<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>IntPtr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>elementOffset <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>nint<span class=\"token punctuation\">)</span><span class=\"token generic-method\"><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As the in memory position of the <code class=\"language-text\">int</code> at array position 12 is <code class=\"language-text\">ptr + sizof(int) * 12</code> the reference is increased by <code class=\"language-text\">48</code> to point to the correct element. Meaning that there is a simpler way of accessing byte arrays; you could use <code class=\"language-text\">Unsafe.AddByteOffset</code> or <code class=\"language-text\">Unsafe.SubtractByteOffset</code> directly.</p>\n<h3>Adding offsets to references</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> ptr <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Subtracting offsets from references</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">ptr<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span><span class=\"token operator\">*</span> x <span class=\"token operator\">=</span> ptr <span class=\"token operator\">-</span> <span class=\"token number\">12</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">-</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Adding offsets in iterations</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">*</span>ptr<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">ptr <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Subtracting offsets in iterations</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">*</span>ptr<span class=\"token operator\">--</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">ptr <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span> ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr <span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Subtract</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Comparing references</h2>\n<p>Certain use cases may require you to compare two references. Not the value they refer to, but the actual address. To make this clear, the references <code class=\"language-text\">ptr1</code> and <code class=\"language-text\">ptr2</code> refer to a different element in the array <code class=\"language-text\">arr</code>, yet C# only allows to compare the values they refer to, which are equal.</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> ptr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">ref</span> <span class=\"token keyword\">int</span> ptr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">ref</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>ptr1 <span class=\"token operator\">==</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> 1 == 1 -> true</span></code></pre></div>\n<p>This is where <code class=\"language-text\">Unsafe.AreSame</code> comes into play. It allows you to compare the address of two pointers and would, of course, return <code class=\"language-text\">false</code> in the above situation. Along the same lines <code class=\"language-text\">Unsafe.IsAddressLessThan</code> and <code class=\"language-text\">Unsafe.IsAddressGreaterThan</code> allow you to compare the relative position of two pointers.</p>\n<h3>Address equality</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>ptr1 <span class=\"token operator\">==</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">AreSame</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Address greater than / less than</h3>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>ptr1 <span class=\"token operator\">&lt;</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>ptr1 <span class=\"token operator\">></span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Debug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">IsAddressLessThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nDebug<span class=\"token punctuation\">.</span><span class=\"token function\">Assert</span><span class=\"token punctuation\">(</span>Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">IsAddressGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Calculate address differences</h3>\n<p>Be aware of two things here:</p>\n<ul>\n<li><code class=\"language-text\">unsafe</code> pointers are always scaled to the size of the type they refer to. <code class=\"language-text\">Unsafe.ByteOffset</code> returns the unscaled difference between two pointers. Thus explaining the division by the size in below sample. Scaling is not required if the type the pointers refer to are bytes.</li>\n<li>Calculating the difference of two pointers requires you to pass them to <code class=\"language-text\">Unsafe.ByteOffset</code> in the opposite order as you would for the subtraction.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> ptr2 <span class=\"token operator\">-</span> ptr1<span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">int</span> diff <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">ByteOffset</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> ptr2<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Copy data from one reference to another</h2>\n<p>The <code class=\"language-text\">Unsafe.CopyBlockUnaligned</code> method can be used to copy data from one location to another. Be aware, however, that this method only operates on byte references. You may have to</p>\n<ul>\n<li>reinterpret your <code class=\"language-text\">int</code> reference as a <code class=\"language-text\">byte</code> reference using <code class=\"language-text\">Unsafe.As&lt;int, byte&gt;(ref ptr)</code> and</li>\n<li>scale the number of items you want to copy to bytes using <code class=\"language-text\">i * Unsafe.SizeOf&lt;int&gt;()</code>.</li>\n</ul>\n<p>Both points can be ignored if you are already working with <code class=\"language-text\">byte</code> references.</p>\n<p>If you are certain that both references are aligned (point to an address that is a multiple of the platform-specific alignment), you can use the faster <code class=\"language-text\">Unsafe.CopyBlock</code>. This is always the case if both references point to the start of an array. Otherwise, it depends on the position and the platform the code is running on: The alignment of the different platforms small and large object heaps are given as follows (referring again to <a href=\"https://prodotnetmemory.com/\">Pro .NET Memory Management by Konrad Kokosa</a>):</p>\n<table>\n<thead>\n<tr>\n<th>Platform</th>\n<th>SOH</th>\n<th>LOH</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>32-bit</strong></td>\n<td>4 byte</td>\n<td>8 byte</td>\n</tr>\n<tr>\n<td><strong>64-bit</strong></td>\n<td>8 byte</td>\n<td>8 byte</td>\n</tr>\n</tbody>\n</table>\n<p>Now without further ado, the samples:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span>ptr1<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>ptr2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">CopyBlockUnaligned</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token keyword\">ref</span>  Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Initializing a block of data</h2>\n<p>Just as above ”<code class=\"language-text\">memcpy</code> equivalent” we also get a ”<code class=\"language-text\">memset</code> equivalent” with <code class=\"language-text\">Unsafe</code>. The methods in question are named <code class=\"language-text\">Unsafe.InitBlock</code> and <code class=\"language-text\">Unsafe.InitBlockUnaligned</code>. The principles introduced in the last chapter regarding pointer scaling and alignment are true for this set of methods as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">--</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">*</span>ptr1<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token number\">0x42</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\">Unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">InitBlockUnaligned</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">ref</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> ptr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n    <span class=\"token number\">0x42</span><span class=\"token punctuation\">,</span> \n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">*</span> Unsafe<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SizeOf</span><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Safety considerations</h2>\n<p>Make absolutely sure you never keep a reference to memory location, that does not correspond to an obejct tracked by the GC. As an example; if you keep a reference to the element right after (out of bounds) an array, the GC can and will move that array without updating your reference!</p>\n<blockquote>\n<p>Feel free to leave feedback, comments and questions on <a href=\"https://www.reddit.com/r/dotnet/comments/akc1vv/unsafe_array_access_and_pointer_arithmetics_in_c/\">reddit</a></p>\n</blockquote>","fields":{"slug":"/system-runtime-compilerservices-unsafe/","prefix":"2019-01-27"},"frontmatter":{"title":"Unsafe array access and pointer arithmetics in C#","author":"nicolas portmann","category":"dotnet","cover":{"childImageSharp":{"resize":{"src":"/static/b864d7fab0550d70b724023a694ddd52/c83a6/joey-banks-380271-unsplash.jpg"}}}}},"authornote":{"id":"2bd2c695-fbab-5aba-9e5f-558db048c85d","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/system-runtime-compilerservices-unsafe/","prev":{"id":"9bfb8c68-0ed7-551a-9dbd-254720e636e6","fields":{"slug":"/logging-with-context-in-spring-webflux/","prefix":"2019-01-05","source":"posts"},"frontmatter":{"title":"Logging with Context in Spring WebFlux (Part II)","category":"java"}},"next":{"id":"ec31cfc3-3f42-5602-8ff1-679f42209f3a","fields":{"slug":"/pascals-triangle/","prefix":"2019-02-15","source":"posts"},"frontmatter":{"title":"Pascal's triangle","category":"scala"}},"source":"posts"}}}