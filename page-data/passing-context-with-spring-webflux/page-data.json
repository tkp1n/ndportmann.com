{"componentChunkName":"component---src-templates-post-template-js","path":"/passing-context-with-spring-webflux/","result":{"data":{"post":{"id":"3fbf6d5e-e7d0-59e5-974f-8a1b3f625c71","html":"<p>With traditional Jakarta EE (Java EE) or Spring projects, we utilize <a href=\"https://logback.qos.ch/manual/mdc.html\">MDCs (Mapped Diagnostic Context)</a> - a feature from SLF4J - to enrich logs with contextual data. Such contextual data might include but is not limited to the following:</p>\n<ul>\n<li>Request ID,</li>\n<li>DNS name of the hardware involved in processing the request,</li>\n<li>The ID of the client initiating the request</li>\n</ul>\n<p>In a microservices environment, this information is then typically passed to all services involved in handling a specific client request. Although <a href=\"https://tools.ietf.org/html/rfc6648\">deprecated</a> we examine, how to best pass context information between services as HTTP non-standard <code class=\"language-text\">X-</code> headers. We also investigate in the second part of this post, how to use constructs such as MDCs in a reactive environment, where <code class=\"language-text\">ThreadLocal</code>s cannot be used to store context. </p>\n<p>The solution to the latter is a variation of <a href=\"https://simonbasle.github.io/2018/02/contextual-logging-with-reactor-context-and-mdc/\">this excellent idea by Simon Basle</a>. I suggest you skim over it before reading the second part, a link to which you can find at the very bottom of this page.</p>\n<h2>Handling headers with WebFilters</h2>\n<p><code class=\"language-text\">WebFilter</code>s function much like their <a href=\"https://www.oracle.com/technetwork/java/filters-137243.html\">servelt counterparts</a>, but using Spring and Reactor specific APIs. </p>\n<p>To start, we start we create a Spring <code class=\"language-text\">@Component</code> implementing the <code class=\"language-text\">WebFilter</code> interface. In this component, we register two methods, one for copying the MDCs passed as request headers to the context, a second one to copy the context to the response. Context, in this case, refers to a <a href=\"https://projectreactor.io/docs/core/release/reference/#context\">well documented</a> concept to handle orthogonal concerns with Reactor (one of the building blocks of Spring WebFulx). </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MdcHeaderFilter</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">WebFilter</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token annotation punctuation\">@NonNull</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>\n        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">ServerWebExchange</span> ex<span class=\"token punctuation\">,</span> \n        <span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">WebFilterChain</span> chain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        ex<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">beforeCommit</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token function\">addContextToHttpResponseHeaders</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getResponse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">return</span> chain<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span>\n                    ctx <span class=\"token operator\">-></span> <span class=\"token function\">addRequestHeadersToContext</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">.</span><span class=\"token function\">getRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Although it might not look like it, <code class=\"language-text\">addRequestHeaderstToContext</code> gets invoked first (in fact before any <code class=\"language-text\">@Controller</code>s) and <code class=\"language-text\">addContextToHttpResponseHeaders</code> is called after the request has been processed by the respective controller. There is one caveat, we should address right away to avoid unpleasant surprises in the future. The <code class=\"language-text\">beforeCommit</code> callback gets executed only if the request handlers leave no exception uncaught. As context in logs is especially important, if something goes wrong, we shall make sure, that no exception goes uncaught (I had to learn this the hard way…). There are many solutions to solve this; we’ll go with a <code class=\"language-text\">@ControllerAdvice</code> capable of improvement for now:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@ControllerAdvice</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WebExceptionHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@ExceptionHandler</span>\n    <span class=\"token annotation punctuation\">@ResponseBody</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ResponseEntity</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">gottaCatchEmAll</span><span class=\"token punctuation\">(</span>\n        <span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">,</span> \n        <span class=\"token class-name\">ServerWebExchange</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>\n            <span class=\"token class-name\">ResponseEntity</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span>status<span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>With that out of the way, we take a look at the two callbacks from the <code class=\"language-text\">WebFilter</code>. <code class=\"language-text\">addRequestHeaderstToContext</code> inspects all headers of every request passed through it and extracts all headers starting with <code class=\"language-text\">X-MDC-</code> and populates a Map with them. Before returning, the Map is added to the context passed as a parameter to the method. A mutable map is now stored within the otherwise immutable <code class=\"language-text\">Context</code>, allowing us to quite easily add additional context information in the handlers as we shall see soon. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> MDC_HEADER_PREFIX <span class=\"token operator\">=</span> <span class=\"token string\">\"X-MDC-\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> CONTEXT_MAP <span class=\"token operator\">=</span> <span class=\"token string\">\"context-map\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Context</span> <span class=\"token function\">addRequestHeadersToContext</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ServerHttpRequest</span> request<span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> contextMap <span class=\"token operator\">=</span> request\n            <span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSingleValueMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span>MDC_HEADER_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n                    <span class=\"token function\">toMap</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> v<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>MDC_HEADER_PREFIX<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                            <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Entry</span><span class=\"token operator\">::</span><span class=\"token function\">getValue</span>\n                    <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">,</span> contextMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The purpose of <code class=\"language-text\">addContextToHttpResponseHeaders</code> is the exact opposite. It prefixes all entries in the context map with <code class=\"language-text\">X-MDC-</code> and adds them to the response headers.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">addContextToHttpResponseHeaders</span><span class=\"token punctuation\">(</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ServerHttpResponse</span> res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">doOnNext</span><span class=\"token punctuation\">(</span>ctx <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ctx<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">HttpHeaders</span> headers <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ctx<span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n                <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> headers<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>MDC_HEADER_PREFIX <span class=\"token operator\">+</span> key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>An aside: In Spring 5.0.4 this was not working as expected which motivated me to open my first <a href=\"https://jira.spring.io/browse/SPR-16597\">issue</a> with Spring. Luckily it was quickly addressed and fixed in Spring 5.0.5.</p>\n</blockquote>\n<h2>Summary</h2>\n<p>With a simple demo controller, we shall now verify whether our filter works as expected. </p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RestController</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Collector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CharSequence</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> COLLECTOR\n            <span class=\"token operator\">=</span> <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">joining</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">lineSeparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"[\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscriberContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>CONTEXT_MAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> prefix <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>kv <span class=\"token operator\">-></span> kv<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\": \"</span> <span class=\"token operator\">+</span> kv<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>COLLECTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/demo\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The context contains: \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">lineSeparator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoController</span><span class=\"token operator\">::</span><span class=\"token function\">apply</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Above REST controller responds to requests to <code class=\"language-text\">/demo</code> with the content of the current context. Let’s see, how it works out.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">curl</span> -v -H <span class=\"token string\">\"X-MDC-FOO: BAR\"</span> localhost:8080/demo\n<span class=\"token operator\">></span> GET /demo HTTP/1.1\n<span class=\"token operator\">></span> Host: localhost:8080\n<span class=\"token operator\">></span> User-Agent: curl/7.58.0\n<span class=\"token operator\">></span> Accept: */*\n<span class=\"token operator\">></span> X-MDC-FOO: BAR\n<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span> HTTP/1.1 <span class=\"token number\">200</span> OK\n<span class=\"token operator\">&lt;</span> Content-Type: text/plain<span class=\"token punctuation\">;</span><span class=\"token assign-left variable\">charset</span><span class=\"token operator\">=</span>UTF-8\n<span class=\"token operator\">&lt;</span> Content-Length: <span class=\"token number\">34</span>\n<span class=\"token operator\">&lt;</span> X-MDC-FOO: BAR\n<span class=\"token operator\">&lt;</span>\nThe context contains:\n<span class=\"token punctuation\">[</span>FOO: BAR<span class=\"token punctuation\">]</span></code></pre></div>\n<p>You might have noticed, that the context is returned as response headers. Very well and just as expected. In part two, we investigate how we can add more information to the context, and leverage it in the application logs.</p>\n<blockquote>\n<p>The entire project (including part two) is on <a href=\"https://github.com/tkp1n/mdc-webflux\">github</a> for your reference.</p>\n</blockquote>","fields":{"slug":"/passing-context-with-spring-webflux/","prefix":"2019-01-04"},"frontmatter":{"title":"Passing Context with Spring WebFlux (Part I)","author":"nicolas portmann","category":"java","cover":{"childImageSharp":{"resize":{"src":"/static/bff675e664834c0b5731c75046b1d565/9dc27/rawpixel-678089-unsplash.jpg"}}}}},"authornote":{"id":"d6a2ffb2-8fcc-537a-80e6-b75d0a167975","html":"<p><strong>Nicolas Portmann</strong> Software developer working on the back-end of the swiss cashless payment platform. Writing code for hardware security modules (Embedded C) and bridging the gap between low level network protocols and high level business applications (in Java/C#).</p>"}},"pageContext":{"slug":"/passing-context-with-spring-webflux/","prev":{"id":"da71724f-bf51-53d3-a510-63970f03a677","fields":{"slug":"/system-threading-channels/","prefix":"2019-01-03","source":"posts"},"frontmatter":{"title":"Exploring System.Threading.Channels","category":"dotnet"}},"next":{"id":"5409d078-7677-51e3-bf37-fefd44b06fc2","fields":{"slug":"/logging-with-context-in-spring-webflux/","prefix":"2019-01-05","source":"posts"},"frontmatter":{"title":"Logging with Context in Spring WebFlux (Part II)","category":"java"}},"source":"posts"}}}